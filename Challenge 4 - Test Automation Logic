Code 1 :- MaintenanceRequestHelper



public with sharing class MaintenanceRequestHelper {
    public static void updateworkOrders(List<Case> updWorkOrders, Map<Id,Case> nonUpdCaseMap) {
        Set<Id> validIds = new Set<Id>();

        for (Case c : updWorkOrders) {
            if (nonUpdCaseMap.get(c.Id).Status != 'Closed' && c.Status == 'Closed') {
                if (c.Type == 'Repair' || c.Type == 'Routine Maintenance') {
                    validIds.add(c.Id);
                }
            }
        }

        if (!validIds.isEmpty()) {
            List<Case> newCases = new List<Case>();
            Map<Id,Case> closedCasesM = new Map<Id,Case>(
                [SELECT Id, Vehicle__c, Equipment__c, 
                    (SELECT Id, Equipment__c, Quantity__c FROM Equipment_Maintenance_Items__r)
                 FROM Case WHERE Id IN :validIds]);

            Map<Id,Decimal> maintenanceCycles = new Map<Id,Decimal>();
            for (AggregateResult ar : [
                SELECT Maintenance_Request__c, MIN(Equipment__r.Maintenance_Cycle__c) cycle
                FROM Equipment_Maintenance_Item__c
                WHERE Maintenance_Request__c IN :validIds
                GROUP BY Maintenance_Request__c
            ]) {
                maintenanceCycles.put((Id) ar.get('Maintenance_Request__c'), (Decimal) ar.get('cycle'));
            }

            for (Case cc : closedCasesM.values()) {
                Case nc = new Case(
                    ParentId = cc.Id,
                    Status = 'New',
                    Subject = 'Routine Maintenance',
                    Type = 'Routine Maintenance',
                    Vehicle__c = cc.Vehicle__c,
                    Equipment__c = cc.Equipment__c,
                    Origin = 'Web',
                    Date_Reported__c = Date.today()
                );

                if (maintenanceCycles.containsKey(cc.Id)) {
                    nc.Date_Due__c = Date.today().addDays((Integer) maintenanceCycles.get(cc.Id));
                }

                newCases.add(nc);
            }

            insert newCases;

            List<Equipment_Maintenance_Item__c> clonedWPs = new List<Equipment_Maintenance_Item__c>();
            for (Case nc : newCases) {
                for (Equipment_Maintenance_Item__c wp : closedCasesM.get(nc.ParentId).Equipment_Maintenance_Items__r) {
                    Equipment_Maintenance_Item__c wpClone = wp.clone(false, true, false, false);
                    wpClone.Maintenance_Request__c = nc.Id;
                    clonedWPs.add(wpClone);
                }
            }
            insert clonedWPs;
        }
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Code 2 :- MaintenanceRequestHelperTest


@isTest
public with sharing class MaintenanceRequestHelperTest {

    private static final String STATUS_NEW = 'New';
    private static final String WORKING = 'Working';
    private static final String CLOSED = 'Closed';
    private static final String REPAIR = 'Repair';
    private static final String REQUEST_ORIGIN = 'Web';
    private static final String REQUEST_TYPE = 'Routine Maintenance';
    private static final String REQUEST_SUBJECT = 'Testing subject';

    private static Vehicle__c createVehicle() {
        return new Vehicle__c(Name = 'SuperTruck_' + System.now().getTime());
    }

    private static Product2 createEq() {
        return new Product2(Name = 'SuperEquipment_' + System.now().getTime(),
                            Lifespan_Months__c = 10,
                            Maintenance_Cycle__c = 10,
                            Replacement_Part__c = true);
    }

    private static Case createMaintenanceRequest(Id vehicleId, Id equipmentId) {
        return new Case(Type = REPAIR,
                        Status = STATUS_NEW,
                        Origin = REQUEST_ORIGIN,
                        Subject = REQUEST_SUBJECT,
                        Equipment__c = equipmentId,
                        Vehicle__c = vehicleId);
    }

    private static Equipment_Maintenance_Item__c createWorkPart(Id equipmentId, Id requestId) {
        return new Equipment_Maintenance_Item__c(Equipment__c = equipmentId,
                                                 Maintenance_Request__c = requestId);
    }

    @isTest
    private static void testMaintenanceRequestPositive() {
        Vehicle__c vehicle = createVehicle();
        insert vehicle;

        Product2 equipment = createEq();
        insert equipment;

        Case req = createMaintenanceRequest(vehicle.Id, equipment.Id);
        insert req;

        Equipment_Maintenance_Item__c workP = createWorkPart(equipment.Id, req.Id);
        insert workP;

        Test.startTest();
        req.Status = CLOSED;
        update req;
        Test.stopTest();

        Case newReq = [SELECT Id, Type, Equipment__c, Vehicle__c, Date_Reported__c
                       FROM Case
                       WHERE Status = :STATUS_NEW
                       LIMIT 1];

        System.assertEquals(REQUEST_TYPE, newReq.Type);
        System.assertEquals(equipment.Id, newReq.Equipment__c);
        System.assertEquals(vehicle.Id, newReq.Vehicle__c);
        System.assertEquals(System.today(), newReq.Date_Reported__c);
    }

    @isTest
    private static void testMaintenanceRequestNegative() {
        Vehicle__c vehicle = createVehicle();
        insert vehicle;

        Product2 equipment = createEq();
        insert equipment;

        Case req = createMaintenanceRequest(vehicle.Id, equipment.Id);
        insert req;

        Equipment_Maintenance_Item__c workP = createWorkPart(equipment.Id, req.Id);
        insert workP;

        Test.startTest();
        req.Status = WORKING;
        update req;
        Test.stopTest();

        Integer count = [SELECT count() FROM Case WHERE Status = :STATUS_NEW];
        System.assertEquals(0, count);
    }

    @isTest
    private static void testMaintenanceRequestBulk() {
        List<Vehicle__c> vehicles = new List<Vehicle__c>();
        List<Product2> equipments = new List<Product2>();
        List<Case> requests = new List<Case>();
        List<Equipment_Maintenance_Item__c> workParts = new List<Equipment_Maintenance_Item__c>();

        for (Integer i = 0; i < 100; i++) {
            vehicles.add(createVehicle());
            equipments.add(createEq());
        }
        insert vehicles;
        insert equipments;

        for (Integer i = 0; i < 100; i++) {
            requests.add(createMaintenanceRequest(vehicles[i].Id, equipments[i].Id));
        }
        insert requests;

        for (Integer i = 0; i < 100; i++) {
            workParts.add(createWorkPart(equipments[i].Id, requests[i].Id));
        }
        insert workParts;

        Test.startTest();
        for (Case req : requests) {
            req.Status = CLOSED;
        }
        update requests;
        Test.stopTest();

        Integer newCount = [SELECT count() FROM Case WHERE Status = :STATUS_NEW];
        System.assertEquals(100, newCount);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////



Code 3 :- MaintenanceRequest

trigger MaintenanceRequest on Case (before update, after update) {
    if(Trigger.isUpdate && Trigger.isAfter) {
        MaintenanceRequestHelper.updateworkOrders(Trigger.New, Trigger.OldMap);
    }
}
